[{"type":"js","data":"/* Imports for global scope */\n\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nSimpleRest = Package['simple:rest'].SimpleRest;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nDDP = Package['ddp-client'].DDP;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nReload = Package.reload.Reload;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"deviceMethods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/deviceMethods.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  let check;\n  module1.link(\"meteor/check\", {\n    check(v) {\n      check = v;\n    }\n\n  }, 0);\n  let messageTransform;\n  module1.link(\"osc-min/lib/osc-utilities\", {\n    messageTransform(v) {\n      messageTransform = v;\n    }\n\n  }, 1);\n  let DevicesCollection;\n  module1.link(\"./devices\", {\n    DevicesCollection(v) {\n      DevicesCollection = v;\n    }\n\n  }, 2);\n  let SceneCollection;\n  module1.link(\"./scenes\", {\n    SceneCollection(v) {\n      SceneCollection = v;\n    }\n\n  }, 3);\n  let MsgsCollection;\n  module1.link(\"./messages\", {\n    MsgsCollection(v) {\n      MsgsCollection = v;\n    }\n\n  }, 4);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  Meteor.methods({\n    deviceUpdate(data) {\n      console.log('updating device: ' + data.deviceID + \"\\n [usb: \" + data.usb + \"; Status: \" + data.status + \"; Power: \" + data.battery + \"; Volume: \" + data.volume + \"]\"); //console.log(DevicesCollection.find().count())\n      //check(deviceID, String);\n      //check(status, String);\n\n      entity = DevicesCollection.findOne({\n        \"device\": data.deviceID\n      }); //console.log(entity);\n\n      DevicesCollection.update(entity._id, {\n        $set: {\n          \"status\": data.status,\n          \"usb\": data.usb,\n          \"battery\": data.battery,\n          \"volume\": data.volume\n        }\n      });\n      let msg = 'device-' + data.deviceID.substr(12) + ' updated with status: ' + data.status + ' & usb: ' + data.usb;\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg); //Meteor.call('msg', {msg: msg});\n\n      return {\n        \"id\": entity._id,\n        \"status\": \"sucess\"\n      };\n    },\n\n    testMethod(data) {\n      ip = '192.168.60.101';\n      if (ip == data.deviceID) console.log(data);\n      s = SceneCollection.findOne({\n        \"current\": \"true\"\n      }); //console.log(s);\n\n      SceneCollection.update(s._id, {\n        $set: {\n          \"current\": \"false\"\n        }\n      });\n      s = SceneCollection.findOne({\n        number: data.current\n      }); //console.log(s);\n\n      SceneCollection.update(s._id, {\n        $set: {\n          \"current\": \"true\",\n          \"prepping\": data.warning\n        }\n      });\n    },\n\n    resetDevice(data) {\n      entity = DevicesCollection.findOne({\n        \"device\": data.deviceID\n      }); //console.log(entity);\n\n      DevicesCollection.update(entity._id, {\n        $set: {\n          \"status\": \"waiting\",\n          \"usb\": data.usb,\n          \"battery\": data.battery,\n          \"volume\": data.volume\n        }\n      });\n      let msg = 'device-' + data.deviceID.substr(12) + ' reset with status: ' + data.status;\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg);\n      return {\n        \"id\": entity._id,\n        \"status\": \"sucess\"\n      };\n    },\n\n    closeDevice(data) {\n      /*\r\n      GH: not sure if ever called\r\n      */\n      //console.log(\"quitting\" + data.deviceID);\n      entity = DevicesCollection.findOne({\n        \"device\": data.deviceID\n      }); //console.log(entity);\n\n      DevicesCollection.update(entity._id, {\n        $set: {\n          \"status\": \"not-present\",\n          \"usb\": \"?\",\n          \"battery\": \"?\",\n          \"volume\": \"?\"\n        }\n      }); //console.log(data.deviceID + ' quit ');\n\n      let msg = 'device-' + data.deviceID.substr(12) + ' app was closed.';\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg);\n      return {\n        \"id\": entity._id,\n        \"status\": \"sucess\"\n      };\n    },\n\n    resetAllDevices(data) {\n      Meteor.call('rewindOSC'); //entity = DevicesCollection.find();\n      //console.log(entity);\n\n      DevicesCollection.update({}, {\n        $set: {\n          \"status\": \"reset\",\n          \"usb\": \"null\",\n          \"battery\": \"null\",\n          \"volume\": \"null\"\n        }\n      }, {\n        multi: true\n      }); //    clear messages\n\n      MsgsCollection.remove({}); //console.log(\"All devices were reset.\");\n\n      let msg = \"All devices in database were reset.\";\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg);\n    }\n\n  }); // Meteor.methods('new-test', function(){\n  //     console.log('new test');\n  // }, {\n  //     url: 'new-test'\n  // })\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"devices.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/devices.js                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    DevicesCollection: () => DevicesCollection\n  });\n  let Mongo;\n  module1.link(\"meteor/mongo\", {\n    Mongo(v) {\n      Mongo = v;\n    }\n\n  }, 0);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  const DevicesCollection = new Mongo.Collection('newdevices');\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"messages.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/messages.js                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    MsgsCollection: () => MsgsCollection\n  });\n  let Mongo;\n  module1.link(\"meteor/mongo\", {\n    Mongo(v) {\n      Mongo = v;\n    }\n\n  }, 0);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  const MsgsCollection = new Mongo.Collection('messages');\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"messagesMethods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/messagesMethods.js                                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  let check;\n  module1.link(\"meteor/check\", {\n    check(v) {\n      check = v;\n    }\n\n  }, 0);\n  let messageTransform;\n  module1.link(\"osc-min/lib/osc-utilities\", {\n    messageTransform(v) {\n      messageTransform = v;\n    }\n\n  }, 1);\n  let MsgsCollection;\n  module1.link(\"./messages\", {\n    MsgsCollection(v) {\n      MsgsCollection = v;\n    }\n\n  }, 2);\n  let SceneCollection;\n  module1.link(\"./scenes\", {\n    SceneCollection(v) {\n      SceneCollection = v;\n    }\n\n  }, 3);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  Meteor.methods({\n    msgUpdate(data) {\n      console.log('msg recived: ' + data.msg);\n      MsgsCollection.insert({\n        msg: entity._id\n      });\n      console.log('inserted msg to collection: ' + data.msg);\n      return {\n        \"msg:\": data.msg,\n        \"status\": \"sucess\"\n      };\n    },\n\n    msg(stg) {\n      console.log(stg);\n    }\n\n  });\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oscMethods.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/oscMethods.js                                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  let osc;\n  module1.link(\"osc-min\", {\n    default(v) {\n      osc = v;\n    }\n\n  }, 0);\n  let dgram;\n  module1.link(\"dgram\", {\n    default(v) {\n      dgram = v;\n    }\n\n  }, 1);\n  let messageTransform;\n  module1.link(\"osc-min/lib/osc-utilities\", {\n    messageTransform(v) {\n      messageTransform = v;\n    }\n\n  }, 2);\n  let MsgsCollection;\n  module1.link(\"./messages\", {\n    MsgsCollection(v) {\n      MsgsCollection = v;\n    }\n\n  }, 3);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  Meteor.methods({\n    sendOSC() {\n      if (Meteor.isServer) {\n        const options = {\n          type: 'udp4',\n          send: {\n            host: '192.168.60.54',\n            port: 8000\n          }\n        };\n        udp = dgram.createSocket(options.type);\n        var message = {\n          address: \"/play\",\n          args: [{\n            type: \"integer\",\n            value: 1\n          }]\n        }; //sendMsg = function(msg){\n\n        var buf;\n        buf = osc.toBuffer(message);\n        udp.send(buf, 0, buf.length, options.send.port, options.send.host); //}\n\n        let msg = \"Play message broadcast to OSC.\";\n        MsgsCollection.insert({\n          msg: msg,\n          time: Date.now(),\n          msg_id: MsgsCollection.find().count() + 1\n        });\n        console.log(msg); // var wtf = sendMsg(message);\n\n        return {\n          \"status\": \"Message sent\"\n        };\n      }\n\n      if (Meteor.isClient) {\n        console.log('The sendOSC function was run on the server');\n      }\n    },\n\n    endPerfOSC() {\n      if (Meteor.isServer) {\n        const options = {\n          type: 'udp4',\n          send: {\n            host: '192.168.60.54',\n            port: 8000\n          }\n        };\n        udp = dgram.createSocket(options.type); // STOP\n\n        var message = {\n          address: \"/stop\",\n          args: [{\n            type: \"integer\",\n            value: 1\n          }]\n        };\n        var buf;\n        buf = osc.toBuffer(message);\n        udp.send(buf, 0, buf.length, options.send.port, options.send.host); // GOTO MARKER\n\n        var stopMarkerMessage = {\n          address: \"/marker\",\n          args: [{\n            type: \"integer\",\n            value: 2\n          }]\n        };\n        var buf;\n        buf = osc.toBuffer(stopMarkerMessage);\n        udp.send(buf, 0, buf.length, options.send.port, options.send.host); // REWIND TO START\n\n        var returnMessage = {\n          //address: \"/frames/str\",\n          address: \"/time/str\",\n          args: [{\n            type: \"string\",\n            value: \"0\"\n          }]\n        };\n        var buf;\n        buf = osc.toBuffer(returnMessage); //udp.send(buf, 0, buf.length, options.send.port, options.send.host);\n\n        let msg = \"Stop Performance message sent OSC\";\n        MsgsCollection.insert({\n          msg: msg,\n          time: Date.now(),\n          msg_id: MsgsCollection.find().count() + 1\n        });\n        console.log(msg); // var wtf = sendMsg(message);\n\n        return {\n          \"status\": \"endPerfOSC Message sent\"\n        };\n      }\n    },\n\n    rewindOSC() {\n      if (Meteor.isServer) {\n        const options = {\n          type: 'udp4',\n          send: {\n            host: '192.168.60.54',\n            port: 8000\n          }\n        };\n        udp = dgram.createSocket(options.type); // REWIND TO START\n\n        var returnMessage = {\n          //address: \"/frames/str\",\n          address: \"/time/str\",\n          args: [{\n            type: \"string\",\n            value: \"0\"\n          }]\n        };\n        var buf;\n        buf = osc.toBuffer(returnMessage);\n        udp.send(buf, 0, buf.length, options.send.port, options.send.host); // var wtf = sendMsg(message);\n\n        return {\n          \"status\": \"endPerfOSC Message sent\"\n        };\n      }\n\n      if (Meteor.isClient) {\n        console.log('The endPerfOSC function was run on the server');\n      }\n    }\n\n  }); //Meteor.call('devices.update',\"fGXsSmgrB434Hszgq\",\"awtirednessesome\");\n\n  /*\r\n  \r\n          const options = {\r\n              type: 'udp4',\r\n              send: {\r\n              host: '192.168.178.22',\r\n              port: 8000\r\n              }\r\n          }\r\n          udp = dgram.createSocket(options.type);\r\n          \r\n          var message = {\r\n              address: \"/play\",\r\n              args: [1]\r\n            };\r\n          \r\n          //sendMsg = function(msg){\r\n              var buf;\r\n              buf = osc.toBuffer(msg)\r\n              udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n            //}\r\n          \r\n  \r\n            \r\n           // var wtf = sendMsg(message);\r\n  \r\n            return {\"status\":\"Message sent\"};\r\n  */\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scenes.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/api/scenes.js                                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    SceneCollection: () => SceneCollection\n  });\n  let Mongo;\n  module1.link(\"meteor/mongo\", {\n    Mongo(v) {\n      Mongo = v;\n    }\n\n  }, 0);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  const SceneCollection = new Mongo.Collection('scenes');\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"ui\":{\"App.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/App.jsx                                                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    App: () => App\n  });\n  let React;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 0);\n  let Menu;\n  module1.link(\"./Menu.jsx\", {\n    Menu(v) {\n      Menu = v;\n    }\n\n  }, 1);\n  let Devices;\n  module1.link(\"./Devices.jsx\", {\n    Devices(v) {\n      Devices = v;\n    }\n\n  }, 2);\n  let Messages;\n  module1.link(\"./Messages.jsx\", {\n    Messages(v) {\n      Messages = v;\n    }\n\n  }, 3);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  const App = () => /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"BOSA !\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"flex-container\",\n    className: \"flex\"\n  }, /*#__PURE__*/React.createElement(Menu, null), /*#__PURE__*/React.createElement(Devices, null), /*#__PURE__*/React.createElement(Messages, null)));\n\n  _c = App;\n\n  var _c;\n\n  $RefreshReg$(_c, \"App\");\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Devices.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/Devices.jsx                                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    Devices: () => Devices\n  });\n  let React;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 0);\n  let useTracker;\n  module1.link(\"meteor/react-meteor-data\", {\n    useTracker(v) {\n      useTracker = v;\n    }\n\n  }, 1);\n  let DevicesCollection;\n  module1.link(\"../api/devices\", {\n    DevicesCollection(v) {\n      DevicesCollection = v;\n    }\n\n  }, 2);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  const Devices = () => {\n    _s();\n\n    const devices = useTracker(() => {\n      console.log(\"Device collection find() = \", DevicesCollection.find().count());\n      return DevicesCollection.find().fetch();\n    });\n    var boxclass;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"devices\",\n      className: \"wrapper cf dev-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\"\n    }, \"Device Info\"), devices.map(device => /*#__PURE__*/React.createElement(\"div\", {\n      key: device.name,\n      className: \"box \".concat(device.status, \" \").concat(device.usb),\n      name: device._id\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"device\"\n    }, device.name), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\"\n    }, \"usb:\", device.usb != 'true' ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"warn\"\n    }, device.usb) : /*#__PURE__*/React.createElement(\"span\", null, device.usb)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\"\n    }, \"status: \", /*#__PURE__*/React.createElement(\"span\", null, device.status)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\"\n    }, \"battery:\", device.battery < 50 ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"warn\"\n    }, device.battery) : /*#__PURE__*/React.createElement(\"span\", null, device.battery)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"status\"\n    }, \"volume:\", device.volume < 100 ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"warn\"\n    }, device.volume) : /*#__PURE__*/React.createElement(\"span\", null, device.volume)))));\n  };\n\n  _s(Devices, \"ONGPz4EFlKwFhHc4KoO2ivcDYeg=\", false, function () {\n    return [useTracker];\n  });\n\n  _c = Devices;\n\n  var _c;\n\n  $RefreshReg$(_c, \"Devices\");\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Menu.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/Menu.jsx                                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    Menu: () => Menu\n  });\n  let React, useState;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    },\n\n    useState(v) {\n      useState = v;\n    }\n\n  }, 0);\n  module1.link(\"../api/deviceMethods\");\n  module1.link(\"../api/oscMethods\");\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  const Menu = () => {\n    _s();\n\n    const [counter, setCounter] = useState(0);\n\n    const increment = () => {\n      setCounter(counter + 1);\n    };\n\n    let perfState = 'waiting';\n\n    const callMethod = () => {\n      Meteor.call('sendOSC');\n      perfState = 'playing';\n    };\n\n    const endPerformMethod = () => {\n      Meteor.call('endPerfOSC');\n      perfState = 'end';\n    };\n\n    const resetAllMethod = () => {\n      Meteor.call('resetAllDevices');\n      perfState = 'end';\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"menu\",\n      className: \"menu-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\"\n    }, \"Menu\"), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnSpace\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button startPerformance\",\n      onClick: callMethod\n    }, \"Start Performance\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnSpace\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button endPerformance\",\n      onClick: endPerformMethod\n    }, \"End Performance\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnSpace\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button resetAll\",\n      onClick: resetAllMethod\n    }, \"Reset System\"))));\n  };\n\n  _s(Menu, \"mgO7WMHyhiBnLtH7uw/qAj2Cy9A=\");\n\n  _c = Menu;\n\n  var _c;\n\n  $RefreshReg$(_c, \"Menu\");\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"Messages.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// imports/ui/Messages.jsx                                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  module1.export({\n    Messages: () => Messages\n  });\n  let React;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 0);\n  let useTracker;\n  module1.link(\"meteor/react-meteor-data\", {\n    useTracker(v) {\n      useTracker = v;\n    }\n\n  }, 1);\n  let MsgsCollection;\n  module1.link(\"../api/messages\", {\n    MsgsCollection(v) {\n      MsgsCollection = v;\n    }\n\n  }, 2);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  var _s = $RefreshSig$();\n\n  const Messages = () => {\n    _s();\n\n    const messages = useTracker(() => {\n      console.log(\"Messages collection find() = \", MsgsCollection.find().count());\n      return MsgsCollection.find({}, {\n        sort: {\n          msg_id: -1\n        }\n      }).fetch();\n    });\n    var boxclass;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"messages\",\n      className: \"wrapper cf message-container\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"header\"\n    }, \"Messages\"), messages.map(message => /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", null, message.msg_id.toString().padStart(3, \"0\")), /*#__PURE__*/React.createElement(\"span\", null, message.msg))));\n  };\n\n  _s(Messages, \"2MSBR6jJDhl4LL8fRlSneajoKtk=\", false, function () {\n    return [useTracker];\n  });\n\n  _c = Messages;\n\n  var _c;\n\n  $RefreshReg$(_c, \"Messages\");\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"client\":{\"main.jsx\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// client/main.jsx                                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function (module1) {\n  let React;\n  module1.link(\"react\", {\n    default(v) {\n      React = v;\n    }\n\n  }, 0);\n  let Meteor;\n  module1.link(\"meteor/meteor\", {\n    Meteor(v) {\n      Meteor = v;\n    }\n\n  }, 1);\n  let render;\n  module1.link(\"react-dom\", {\n    render(v) {\n      render = v;\n    }\n\n  }, 2);\n  let App;\n  module1.link(\"/imports/ui/App\", {\n    App(v) {\n      App = v;\n    }\n\n  }, 3);\n  module1.link(\"/imports/api/deviceMethods\");\n  module1.link(\"/imports/api/messagesMethods\");\n  let OSC;\n  module1.link(\"osc-js\", {\n    default(v) {\n      OSC = v;\n    }\n\n  }, 4);\n\n  ___INIT_METEOR_FAST_REFRESH(module);\n\n  Meteor.startup(() => {\n    render( /*#__PURE__*/React.createElement(App, null), document.getElementById('react-target'));\n    Meteor.subscribe('devices');\n    Meteor.subscribe('messages');\n    Meteor.call('resetAllDevices', \"fGXsSmgrB434Hsgaz\", \"awesome\");\n  });\n}.call(this, module);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\",\n    \".jsx\",\n    \".css\"\n  ]\n});\n\nvar exports = require(\"/client/main.jsx\");","hash":"449add3ea46326b089fe71161812421ac19915d2","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/deviceMethods.js","imports/api/devices.js","imports/api/messages.js","imports/api/messagesMethods.js","imports/api/oscMethods.js","imports/api/scenes.js","imports/ui/App.jsx","imports/ui/Devices.jsx","imports/ui/Menu.jsx","imports/ui/Messages.jsx","client/main.jsx"],"names":["Meteor","methods","deviceUpdate","data","console","log","deviceID","usb","status","battery","volume","entity","DevicesCollection","findOne","update","_id","$set","msg","substr","MsgsCollection","insert","time","Date","now","msg_id","find","count","testMethod","ip","s","SceneCollection","number","current","warning","resetDevice","closeDevice","resetAllDevices","call","multi","remove","Mongo","Collection","msgUpdate","stg","sendOSC","isServer","options","type","send","host","port","udp","dgram","createSocket","message","address","args","value","buf","osc","toBuffer","length","isClient","endPerfOSC","stopMarkerMessage","returnMessage","rewindOSC","App","Devices","_s","devices","useTracker","fetch","boxclass","map","device","name","Menu","counter","setCounter","useState","increment","perfState","callMethod","endPerformMethod","resetAllMethod","Messages","messages","sort","toString","padStart","startup","render","document","getElementById","subscribe"],"mappings":"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","file":"/app.js","sourcesContent":["import { check } from 'meteor/check'\r\nimport { messageTransform } from 'osc-min/lib/osc-utilities'\r\nimport { DevicesCollection } from './devices'\r\nimport {SceneCollection} from './scenes'\r\nimport {MsgsCollection} from './messages'\r\n\r\nMeteor.methods({\r\n    deviceUpdate(data){\r\n        console.log('updating device: ' + data.deviceID\r\n        + \"\\n [usb: \" + data.usb\r\n        + \"; Status: \" + data.status\r\n        + \"; Power: \" + data.battery\r\n        + \"; Volume: \" + data.volume +\"]\");\r\n        //console.log(DevicesCollection.find().count())\r\n        //check(deviceID, String);\r\n        //check(status, String);\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : data.status, \r\n                    \"usb\" : data.usb,\r\n                    \"battery\" : data.battery,\r\n                    \"volume\" : data.volume\r\n                }}\r\n            );\r\n        \r\n        let msg = 'device-' + data.deviceID.substr(12)\r\n         + ' updated with status: ' + data.status\r\n         + ' & usb: ' + data.usb;\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n        //Meteor.call('msg', {msg: msg});\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    testMethod(data){\r\n        ip = '192.168.60.101';\r\n        if(ip == data.deviceID)\r\n        console.log(data);\r\n        s = SceneCollection.findOne({\"current\": \"true\"});\r\n        //console.log(s);\r\n        SceneCollection.update(s._id,\r\n            {$set: {\"current\": \"false\"\r\n                }}\r\n            );\r\n        \r\n        s = SceneCollection.findOne({number: data.current});\r\n        //console.log(s);\r\n        SceneCollection.update(s._id,\r\n                {$set: {\"current\": \"true\", \"prepping\" : data.warning}}\r\n            );\r\n    },\r\n    resetDevice(data){\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : \"waiting\", \r\n                    \"usb\" : data.usb,\r\n                    \"battery\" : data.battery,\r\n                    \"volume\" : data.volume\r\n                }}\r\n            );\r\n        let msg = 'device-' + data.deviceID.substr(12) + ' reset with status: ' + data.status;\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    closeDevice(data){\r\n        /*\r\n        GH: not sure if ever called\r\n        */ \r\n        //console.log(\"quitting\" + data.deviceID);\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : \"not-present\", \r\n                    \"usb\" : \"?\",\r\n                    \"battery\" : \"?\",\r\n                    \"volume\" : \"?\"\r\n                }}\r\n            );\r\n        //console.log(data.deviceID + ' quit ');\r\n        let msg = 'device-' + data.deviceID.substr(12) + ' app was closed.';\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    \r\n    resetAllDevices(data){\r\n\r\n        Meteor.call('rewindOSC');\r\n        //entity = DevicesCollection.find();\r\n        //console.log(entity);\r\n        DevicesCollection.update({}, \r\n            {$set: {\"status\" : \"reset\", \r\n                    \"usb\" : \"null\",\r\n                    \"battery\" : \"null\",\r\n                    \"volume\" : \"null\"\r\n                }},\r\n                {multi: true}\r\n            );\r\n\r\n            \r\n            \r\n        //    clear messages\r\n        MsgsCollection.remove({});\r\n        //console.log(\"All devices were reset.\");\r\n        let msg = \"All devices in database were reset.\";\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n    }\r\n})\r\n\r\n// Meteor.methods('new-test', function(){\r\n//     console.log('new test');\r\n// }, {\r\n//     url: 'new-test'\r\n// })","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const DevicesCollection = new Mongo.Collection('newdevices');\r\n","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const MsgsCollection = new Mongo.Collection('messages');","import { check } from 'meteor/check'\r\nimport { messageTransform } from 'osc-min/lib/osc-utilities'\r\nimport { MsgsCollection } from './messages'\r\nimport {SceneCollection} from './scenes'\r\n\r\nMeteor.methods({\r\n    msgUpdate(data){\r\n        console.log('msg recived: ' + data.msg);\r\n\r\n        MsgsCollection.insert({msg: entity._id\r\n            }\r\n            );\r\n        console.log('inserted msg to collection: ' + data.msg)\r\n\r\n        return {\"msg:\":data.msg,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    msg(stg){\r\n        console.log(stg);\r\n    }\r\n})","import osc from 'osc-min'\r\nimport dgram from 'dgram'\r\nimport { messageTransform } from 'osc-min/lib/osc-utilities';\r\nimport {MsgsCollection} from './messages'\r\n\r\n\r\n    Meteor.methods({\r\n        sendOSC(){\r\n            if (Meteor.isServer){\r\n              const options = {\r\n                type: 'udp4',\r\n                send: {\r\n                host: '192.168.60.54',\r\n                port: 8000\r\n                }\r\n            }\r\n            udp = dgram.createSocket(options.type);\r\n            \r\n            var message = {\r\n                address: \"/play\",\r\n                args: [{type: \"integer\", value: 1}]\r\n              };\r\n            \r\n            //sendMsg = function(msg){\r\n                var buf;\r\n                buf = osc.toBuffer(message)\r\n                udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n              //}\r\n            \r\n                 \r\n              let msg = \"Play message broadcast to OSC.\";\r\n              MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n              console.log(msg);\r\n              \r\n             // var wtf = sendMsg(message);\r\n    \r\n              return {\"status\":\"Message sent\"};  \r\n            }\r\n            if(Meteor.isClient){\r\n                console.log('The sendOSC function was run on the server');\r\n            }\r\n            \r\n        },\r\n        endPerfOSC(){\r\n            if (Meteor.isServer){\r\n                const options = {\r\n                    type: 'udp4',\r\n                    send: {\r\n                    host: '192.168.60.54',\r\n                    port: 8000\r\n                    }\r\n                }\r\n                udp = dgram.createSocket(options.type);\r\n                \r\n                // STOP\r\n                var message = {\r\n                    address: \"/stop\",\r\n                    args: [{type: \"integer\", value: 1}]\r\n                  };\r\n                    var buf;\r\n                    buf = osc.toBuffer(message)\r\n                    udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                \r\n                  // GOTO MARKER\r\n                  var stopMarkerMessage = {\r\n                    address: \"/marker\",\r\n                    args: [{type: \"integer\", value: 2}]\r\n                  };\r\n                \r\n                    var buf;\r\n                    buf = osc.toBuffer(stopMarkerMessage)\r\n                    udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n\r\n                  // REWIND TO START\r\n                    var returnMessage = {\r\n                      //address: \"/frames/str\",\r\n                      address: \"/time/str\",\r\n                      args: [{type: \"string\", value: \"0\"}]\r\n                    };\r\n                  \r\n                      var buf;\r\n                      buf = osc.toBuffer(returnMessage)\r\n                      //udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                \r\n                  let msg = \"Stop Performance message sent OSC\";\r\n                  MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n                  console.log(msg);\r\n                  \r\n                 // var wtf = sendMsg(message);\r\n\r\n                  return {\"status\":\"endPerfOSC Message sent\"};  \r\n            }},\r\n        rewindOSC(){\r\n            if (Meteor.isServer){\r\n                const options = {\r\n                    type: 'udp4',\r\n                    send: {\r\n                    host: '192.168.60.54',\r\n                    port: 8000\r\n                    }\r\n                }\r\n                udp = dgram.createSocket(options.type);\r\n                \r\n                // REWIND TO START\r\n                    var returnMessage = {\r\n                      //address: \"/frames/str\",\r\n                      address: \"/time/str\",\r\n                      args: [{type: \"string\", value: \"0\"}]\r\n                    };\r\n                  \r\n                      var buf;\r\n                      buf = osc.toBuffer(returnMessage)\r\n                      udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                                  \r\n                 // var wtf = sendMsg(message);\r\n\r\n                  return {\"status\":\"endPerfOSC Message sent\"};  \r\n            }\r\n            if(Meteor.isClient){\r\n                console.log('The endPerfOSC function was run on the server');\r\n            }\r\n          }\r\n    });\r\n\r\n\r\n\r\n\r\n  //Meteor.call('devices.update',\"fGXsSmgrB434Hszgq\",\"awtirednessesome\");\r\n/*\r\n\r\n        const options = {\r\n            type: 'udp4',\r\n            send: {\r\n            host: '192.168.178.22',\r\n            port: 8000\r\n            }\r\n        }\r\n        udp = dgram.createSocket(options.type);\r\n        \r\n        var message = {\r\n            address: \"/play\",\r\n            args: [1]\r\n          };\r\n        \r\n        //sendMsg = function(msg){\r\n            var buf;\r\n            buf = osc.toBuffer(msg)\r\n            udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n          //}\r\n        \r\n\r\n          \r\n         // var wtf = sendMsg(message);\r\n\r\n          return {\"status\":\"Message sent\"};\r\n*/","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const SceneCollection = new Mongo.Collection('scenes');\r\n","import React from 'react';\r\nimport { Menu } from './Menu.jsx';\r\nimport { Devices } from './Devices.jsx';\r\nimport { Messages } from './Messages.jsx';\r\n\r\nexport const App = () => (\r\n  <div>\r\n    <h1>BOSA !</h1>\r\n    \r\n    <div id=\"flex-container\" className='flex'>\r\n      <Menu/>\r\n      <Devices/>\r\n      <Messages/>\r\n      \r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\n","import React from 'react';\r\nimport { useTracker } from 'meteor/react-meteor-data';\r\nimport { DevicesCollection } from '../api/devices';\r\n\r\nexport const Devices = () => {\r\n  const devices = useTracker(() => {\r\n    console.log(\"Device collection find() = \",DevicesCollection.find().count())\r\n    return DevicesCollection.find().fetch();\r\n  });\r\n\r\n  var boxclass;\r\n\r\n  return (\r\n    <div id=\"devices\" className='wrapper cf dev-container'>\r\n      <div className='header'>Device Info</div>\r\n      {devices.map(\r\n        device => \r\n        \r\n          <div key={device.name} className={`box ${device.status} ${device.usb}`} name={device._id}> \r\n            <div className='device'>{device.name}</div>\r\n            <div className='status'>usb: \r\n              {device.usb!='true' ? \r\n                <span className='warn'>{device.usb}</span> : \r\n                <span>{device.usb}</span>\r\n                }\r\n            </div><div className='status'>status: <span>{device.status}</span></div>\r\n            <div className='status'>battery: \r\n              {device.battery<50 ? \r\n                <span className='warn'>{device.battery}</span> : \r\n                <span>{device.battery}</span>\r\n                }\r\n            </div>\r\n            <div className='status'>volume: \r\n              {device.volume<100 ? \r\n                <span className='warn'>{device.volume}</span> : \r\n                <span>{device.volume}</span>\r\n                }\r\n              </div>\r\n          </div>\r\n        \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport '../api/deviceMethods'\r\nimport '../api/oscMethods'\r\n\r\n\r\nexport const Menu = () => {\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCounter(counter + 1);\r\n  };\r\n\r\n  let perfState = 'waiting'\r\n\r\n  const callMethod = () => {\r\n    Meteor.call('sendOSC');\r\n    perfState = 'playing';\r\n  };\r\n\r\n  \r\n  const endPerformMethod = () => {\r\n    Meteor.call('endPerfOSC');\r\n    perfState = 'end';\r\n  };\r\n  \r\n  const resetAllMethod = () => {\r\n    Meteor.call('resetAllDevices');\r\n    perfState = 'end';\r\n  };\r\n\r\n  return (\r\n    <div id=\"menu\" className='menu-container'>\r\n      <div className='header'>Menu</div>\r\n      <div>\r\n        <div className=\"btnSpace\"><button className=\"button startPerformance\" onClick={callMethod}>Start Performance</button></div>\r\n        <div className=\"btnSpace\"><button className=\"button endPerformance\" onClick={endPerformMethod}>End Performance</button></div>\r\n        <div className=\"btnSpace\"><button className=\"button resetAll\" onClick={resetAllMethod}>Reset System</button></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useTracker } from 'meteor/react-meteor-data';\r\nimport { MsgsCollection } from '../api/messages';\r\n\r\nexport const Messages = () => {\r\n  const messages = useTracker(() => {\r\n    console.log(\"Messages collection find() = \",MsgsCollection.find().count())\r\n    return MsgsCollection.find({},{sort: {msg_id: -1}}).fetch();\r\n  });\r\n\r\n  var boxclass;\r\n\r\n  return (\r\n    <div id=\"messages\" className='wrapper cf message-container'>\r\n      <div className='header'>Messages</div>\r\n      {messages.map(\r\n        message => \r\n        \r\n          <div> \r\n            <span>{message.msg_id.toString().padStart(3, \"0\")}</span>\r\n            <span>{message.msg}</span>\r\n          </div>\r\n        \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { render } from 'react-dom';\r\nimport { App } from '/imports/ui/App';\r\nimport '/imports/api/deviceMethods';\r\nimport '/imports/api/messagesMethods';\r\nimport OSC from 'osc-js';\r\n\r\n\r\nMeteor.startup(() => {\r\n  render(<App/>, document.getElementById('react-target'));\r\n  Meteor.subscribe('devices');\r\n  Meteor.subscribe('messages');\r\n  Meteor.call('resetAllDevices',\"fGXsSmgrB434Hsgaz\",\"awesome\");\r\n});\r\n"]}}]