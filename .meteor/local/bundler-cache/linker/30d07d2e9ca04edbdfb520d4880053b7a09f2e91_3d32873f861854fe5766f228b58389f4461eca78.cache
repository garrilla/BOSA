[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_client.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/autoupdate/autoupdate_client.js                                                                   //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n!function (module1) {\n  module1.export({\n    Autoupdate: function () {\n      return Autoupdate;\n    }\n  });\n  var ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions: function (v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  var clientArch = Meteor.isCordova ? \"web.cordova\" : Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n  var autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: []\n  };\n  var Autoupdate = {};\n  // Stores acceptable client versions.\n  var clientVersions = Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n  Meteor.connection.registerStore(\"meteor_autoupdate_clientVersions\", clientVersions.createStore());\n\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(clientArch, [\"versionRefreshable\", \"versionNonRefreshable\"], autoupdateVersions);\n  }; // Set to true if the link.onload callback ever fires for any <link> node.\n\n\n  var knownToSupportCssOnLoad = false;\n  var retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n\n  });\n  var failures = 0;\n\n  Autoupdate._retrySubscription = function () {\n    Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n      onError: function (error) {\n        Meteor._debug(\"autoupdate subscription failed\", error);\n\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady: function () {\n        // Call checkNewVersionDocument with a slight delay, so that the\n        // const handle declaration is guaranteed to be initialized, even if\n        // the added or changed callbacks are called synchronously.\n        var resolved = Promise.resolve();\n\n        function check(doc) {\n          resolved.then(function () {\n            return checkNewVersionDocument(doc);\n          });\n        }\n\n        var stop = clientVersions.watch(check);\n\n        function checkNewVersionDocument(doc) {\n          if (doc._id !== clientArch) {\n            return;\n          }\n\n          if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n            // Non-refreshable assets have changed, so we have to reload the\n            // whole page rather than just replacing <link> tags.\n            if (stop) stop();\n\n            if (Package.reload) {\n              // The reload package should be provided by ddp-client, which\n              // is provided by the ddp package that autoupdate depends on.\n              Package.reload.Reload._reload();\n            }\n\n            return;\n          }\n\n          if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n            var waitUntilCssLoads = function (link, callback) {\n              var called;\n\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n\n                if (!called) {\n                  called = true;\n                  callback();\n                }\n              };\n\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    if (!called) {\n                      called = true;\n                      callback();\n                    }\n\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            };\n\n            var removeOldLinks = function () {\n              if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n                oldLinks.splice(0).forEach(function (link) {\n                  link.parentNode.removeChild(link);\n                });\n              }\n            };\n\n            autoupdateVersions.versionRefreshable = doc.versionRefreshable; // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n\n            var newCss = doc.assets || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n            var newLinksLeftToLoad = newCss.length;\n\n            if (newCss.length > 0) {\n              newCss.forEach(function (css) {\n                var newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", css.url);\n                waitUntilCssLoads(newLink, function () {\n                  Meteor.setTimeout(removeOldLinks, 200);\n                });\n                var head = document.getElementsByTagName(\"head\").item(0);\n                head.appendChild(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          }\n        }\n      }\n    });\n  };\n\n  Autoupdate._retrySubscription();\n}.call(this, module);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/autoupdate/client_versions.js                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: function () {\n    return ClientVersions;\n  }\n});\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 0);\n\nvar ClientVersions = /*#__PURE__*/function () {\n  function ClientVersions() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  } // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n\n\n  var _proto = ClientVersions.prototype;\n\n  _proto.createStore = function () {\n    function createStore() {\n      var _this = this;\n\n      return {\n        update: function (_ref) {\n          var id = _ref.id,\n              msg = _ref.msg,\n              fields = _ref.fields;\n\n          if (msg === \"added\" || msg === \"changed\") {\n            _this.set(id, fields);\n          }\n        }\n      };\n    }\n\n    return createStore;\n  }();\n\n  _proto.hasVersions = function () {\n    function hasVersions() {\n      return this._versions.size > 0;\n    }\n\n    return hasVersions;\n  }();\n\n  _proto.get = function () {\n    function get(id) {\n      return this._versions.get(id);\n    }\n\n    return get;\n  }() // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  ;\n\n  _proto.set = function () {\n    function set(id, fields) {\n      var version = this._versions.get(id);\n\n      var isNew = false;\n\n      if (version) {\n        Object.assign(version, fields);\n      } else {\n        version = _objectSpread({\n          _id: id\n        }, fields);\n        isNew = true;\n\n        this._versions.set(id, version);\n      }\n\n      this._watchCallbacks.forEach(function (_ref2) {\n        var fn = _ref2.fn,\n            filter = _ref2.filter;\n\n        if (!filter || filter === version._id) {\n          fn(version, isNew);\n        }\n      });\n    }\n\n    return set;\n  }() // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  ;\n\n  _proto.watch = function () {\n    function watch(fn) {\n      var _this2 = this;\n\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          skipInitial = _ref3.skipInitial,\n          filter = _ref3.filter;\n\n      if (!skipInitial) {\n        var resolved = Promise.resolve();\n\n        this._versions.forEach(function (version) {\n          if (!filter || filter === version._id) {\n            resolved.then(function () {\n              return fn(version, true);\n            });\n          }\n        });\n      }\n\n      var callback = {\n        fn: fn,\n        filter: filter\n      };\n\n      this._watchCallbacks.add(callback);\n\n      return function () {\n        return _this2._watchCallbacks.delete(callback);\n      };\n    }\n\n    return watch;\n  }() // A reactive data source for `Autoupdate.newClientAvailable`.\n  ;\n\n  _proto.newClientAvailable = function () {\n    function newClientAvailable(id, fields, currentVersion) {\n      function isNewVersion(version) {\n        return version._id === id && fields.some(function (field) {\n          return version[field] !== currentVersion[field];\n        });\n      }\n\n      var dependency = new Tracker.Dependency();\n      var version = this.get(id);\n      dependency.depend();\n      var stop = this.watch(function (version) {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      }, {\n        skipInitial: true\n      });\n      return !!version && isNewVersion(version);\n    }\n\n    return newClientAvailable;\n  }();\n\n  return ClientVersions;\n}();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/autoupdate/autoupdate_client.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", exports, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js","packages/autoupdate/client_versions.js"],"names":["module1","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStore","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","_id","Package","reload","Reload","_reload","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","removeOldLinks","oldLinks","length","newLinksLeftToLoad","splice","forEach","parentNode","removeChild","newCss","Array","prototype","call","document","getElementsByTagName","className","push","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild","_objectSpread","module","default","Tracker","_versions","Map","_watchCallbacks","Set","update","msg","fields","set","hasVersions","size","get","isNew","Object","assign","fn","filter","skipInitial","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from \"./client_versions.js\";\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions =\n  Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n\nMeteor.connection.registerStore(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    clientArch,\n    [\"versionRefreshable\", \"versionNonRefreshable\"],\n    autoupdateVersions\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}}]