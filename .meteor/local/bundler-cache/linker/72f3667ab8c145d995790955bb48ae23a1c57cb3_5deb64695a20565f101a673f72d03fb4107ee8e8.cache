[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nECMAScript = Package.ecmascript.ECMAScript;\nSimpleRest = Package['simple:rest'].SimpleRest;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"deviceMethods.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/deviceMethods.js                                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 0);\nlet messageTransform;\nmodule.link(\"osc-min/lib/osc-utilities\", {\n  messageTransform(v) {\n    messageTransform = v;\n  }\n\n}, 1);\nlet DevicesCollection;\nmodule.link(\"./devices\", {\n  DevicesCollection(v) {\n    DevicesCollection = v;\n  }\n\n}, 2);\nlet SceneCollection;\nmodule.link(\"./scenes\", {\n  SceneCollection(v) {\n    SceneCollection = v;\n  }\n\n}, 3);\nlet MsgsCollection;\nmodule.link(\"./messages\", {\n  MsgsCollection(v) {\n    MsgsCollection = v;\n  }\n\n}, 4);\nMeteor.methods({\n  deviceUpdate(data) {\n    console.log('updating device: ' + data.deviceID + \"\\n [usb: \" + data.usb + \"; Status: \" + data.status + \"; Power: \" + data.battery + \"; Volume: \" + data.volume + \"]\"); //console.log(DevicesCollection.find().count())\n    //check(deviceID, String);\n    //check(status, String);\n\n    entity = DevicesCollection.findOne({\n      \"device\": data.deviceID\n    }); //console.log(entity);\n\n    DevicesCollection.update(entity._id, {\n      $set: {\n        \"status\": data.status,\n        \"usb\": data.usb,\n        \"battery\": data.battery,\n        \"volume\": data.volume\n      }\n    });\n    let msg = 'device-' + data.deviceID.substr(12) + ' updated with status: ' + data.status + ' & usb: ' + data.usb;\n    MsgsCollection.insert({\n      msg: msg,\n      time: Date.now(),\n      msg_id: MsgsCollection.find().count() + 1\n    });\n    console.log(msg); //Meteor.call('msg', {msg: msg});\n\n    return {\n      \"id\": entity._id,\n      \"status\": \"sucess\"\n    };\n  },\n\n  testMethod(data) {\n    ip = '192.168.60.101';\n    if (ip == data.deviceID) console.log(data);\n    s = SceneCollection.findOne({\n      \"current\": \"true\"\n    }); //console.log(s);\n\n    SceneCollection.update(s._id, {\n      $set: {\n        \"current\": \"false\"\n      }\n    });\n    s = SceneCollection.findOne({\n      number: data.current\n    }); //console.log(s);\n\n    SceneCollection.update(s._id, {\n      $set: {\n        \"current\": \"true\",\n        \"prepping\": data.warning\n      }\n    });\n  },\n\n  resetDevice(data) {\n    entity = DevicesCollection.findOne({\n      \"device\": data.deviceID\n    }); //console.log(entity);\n\n    DevicesCollection.update(entity._id, {\n      $set: {\n        \"status\": \"waiting\",\n        \"usb\": data.usb,\n        \"battery\": data.battery,\n        \"volume\": data.volume\n      }\n    });\n    let msg = 'device-' + data.deviceID.substr(12) + ' reset with status: ' + data.status;\n    MsgsCollection.insert({\n      msg: msg,\n      time: Date.now(),\n      msg_id: MsgsCollection.find().count() + 1\n    });\n    console.log(msg);\n    return {\n      \"id\": entity._id,\n      \"status\": \"sucess\"\n    };\n  },\n\n  closeDevice(data) {\n    /*\r\n    GH: not sure if ever called\r\n    */\n    //console.log(\"quitting\" + data.deviceID);\n    entity = DevicesCollection.findOne({\n      \"device\": data.deviceID\n    }); //console.log(entity);\n\n    DevicesCollection.update(entity._id, {\n      $set: {\n        \"status\": \"not-present\",\n        \"usb\": \"?\",\n        \"battery\": \"?\",\n        \"volume\": \"?\"\n      }\n    }); //console.log(data.deviceID + ' quit ');\n\n    let msg = 'device-' + data.deviceID.substr(12) + ' app was closed.';\n    MsgsCollection.insert({\n      msg: msg,\n      time: Date.now(),\n      msg_id: MsgsCollection.find().count() + 1\n    });\n    console.log(msg);\n    return {\n      \"id\": entity._id,\n      \"status\": \"sucess\"\n    };\n  },\n\n  resetAllDevices(data) {\n    Meteor.call('rewindOSC'); //entity = DevicesCollection.find();\n    //console.log(entity);\n\n    DevicesCollection.update({}, {\n      $set: {\n        \"status\": \"reset\",\n        \"usb\": \"null\",\n        \"battery\": \"null\",\n        \"volume\": \"null\"\n      }\n    }, {\n      multi: true\n    }); //    clear messages\n\n    MsgsCollection.remove({}); //console.log(\"All devices were reset.\");\n\n    let msg = \"All devices in database were reset.\";\n    MsgsCollection.insert({\n      msg: msg,\n      time: Date.now(),\n      msg_id: MsgsCollection.find().count() + 1\n    });\n    console.log(msg);\n  }\n\n}); // Meteor.methods('new-test', function(){\n//     console.log('new test');\n// }, {\n//     url: 'new-test'\n// })\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"devices.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/devices.js                                                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  DevicesCollection: () => DevicesCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst DevicesCollection = new Mongo.Collection('newdevices');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"devicesPublications.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/devicesPublications.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet DevicesCollection;\nmodule.link(\"./devices\", {\n  DevicesCollection(v) {\n    DevicesCollection = v;\n  }\n\n}, 1);\nMeteor.publish('devices', function publishDevices() {\n  return DevicesCollection.find();\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"links.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/links.js                                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  LinksCollection: () => LinksCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst LinksCollection = new Mongo.Collection('links');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"messages.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/messages.js                                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  MsgsCollection: () => MsgsCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst MsgsCollection = new Mongo.Collection('messages');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"messagesPublication.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/messagesPublication.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet MsgsCollection;\nmodule.link(\"./messages\", {\n  MsgsCollection(v) {\n    MsgsCollection = v;\n  }\n\n}, 1);\nMeteor.publish('messages', function publishMessages() {\n  return MsgsCollection.find();\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"oscMethods.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/oscMethods.js                                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet osc;\nmodule.link(\"osc-min\", {\n  default(v) {\n    osc = v;\n  }\n\n}, 0);\nlet dgram;\nmodule.link(\"dgram\", {\n  default(v) {\n    dgram = v;\n  }\n\n}, 1);\nlet messageTransform;\nmodule.link(\"osc-min/lib/osc-utilities\", {\n  messageTransform(v) {\n    messageTransform = v;\n  }\n\n}, 2);\nlet MsgsCollection;\nmodule.link(\"./messages\", {\n  MsgsCollection(v) {\n    MsgsCollection = v;\n  }\n\n}, 3);\nMeteor.methods({\n  sendOSC() {\n    if (Meteor.isServer) {\n      const options = {\n        type: 'udp4',\n        send: {\n          host: '192.168.60.54',\n          port: 8000\n        }\n      };\n      udp = dgram.createSocket(options.type);\n      var message = {\n        address: \"/play\",\n        args: [{\n          type: \"integer\",\n          value: 1\n        }]\n      }; //sendMsg = function(msg){\n\n      var buf;\n      buf = osc.toBuffer(message);\n      udp.send(buf, 0, buf.length, options.send.port, options.send.host); //}\n\n      let msg = \"Play message broadcast to OSC.\";\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg); // var wtf = sendMsg(message);\n\n      return {\n        \"status\": \"Message sent\"\n      };\n    }\n\n    if (Meteor.isClient) {\n      console.log('The sendOSC function was run on the server');\n    }\n  },\n\n  endPerfOSC() {\n    if (Meteor.isServer) {\n      const options = {\n        type: 'udp4',\n        send: {\n          host: '192.168.60.54',\n          port: 8000\n        }\n      };\n      udp = dgram.createSocket(options.type); // STOP\n\n      var message = {\n        address: \"/stop\",\n        args: [{\n          type: \"integer\",\n          value: 1\n        }]\n      };\n      var buf;\n      buf = osc.toBuffer(message);\n      udp.send(buf, 0, buf.length, options.send.port, options.send.host); // GOTO MARKER\n\n      var stopMarkerMessage = {\n        address: \"/marker\",\n        args: [{\n          type: \"integer\",\n          value: 2\n        }]\n      };\n      var buf;\n      buf = osc.toBuffer(stopMarkerMessage);\n      udp.send(buf, 0, buf.length, options.send.port, options.send.host); // REWIND TO START\n\n      var returnMessage = {\n        //address: \"/frames/str\",\n        address: \"/time/str\",\n        args: [{\n          type: \"string\",\n          value: \"0\"\n        }]\n      };\n      var buf;\n      buf = osc.toBuffer(returnMessage); //udp.send(buf, 0, buf.length, options.send.port, options.send.host);\n\n      let msg = \"Stop Performance message sent OSC\";\n      MsgsCollection.insert({\n        msg: msg,\n        time: Date.now(),\n        msg_id: MsgsCollection.find().count() + 1\n      });\n      console.log(msg); // var wtf = sendMsg(message);\n\n      return {\n        \"status\": \"endPerfOSC Message sent\"\n      };\n    }\n  },\n\n  rewindOSC() {\n    if (Meteor.isServer) {\n      const options = {\n        type: 'udp4',\n        send: {\n          host: '192.168.60.54',\n          port: 8000\n        }\n      };\n      udp = dgram.createSocket(options.type); // REWIND TO START\n\n      var returnMessage = {\n        //address: \"/frames/str\",\n        address: \"/time/str\",\n        args: [{\n          type: \"string\",\n          value: \"0\"\n        }]\n      };\n      var buf;\n      buf = osc.toBuffer(returnMessage);\n      udp.send(buf, 0, buf.length, options.send.port, options.send.host); // var wtf = sendMsg(message);\n\n      return {\n        \"status\": \"endPerfOSC Message sent\"\n      };\n    }\n\n    if (Meteor.isClient) {\n      console.log('The endPerfOSC function was run on the server');\n    }\n  }\n\n}); //Meteor.call('devices.update',\"fGXsSmgrB434Hszgq\",\"awtirednessesome\");\n\n/*\r\n\r\n        const options = {\r\n            type: 'udp4',\r\n            send: {\r\n            host: '192.168.178.22',\r\n            port: 8000\r\n            }\r\n        }\r\n        udp = dgram.createSocket(options.type);\r\n        \r\n        var message = {\r\n            address: \"/play\",\r\n            args: [1]\r\n          };\r\n        \r\n        //sendMsg = function(msg){\r\n            var buf;\r\n            buf = osc.toBuffer(msg)\r\n            udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n          //}\r\n        \r\n\r\n          \r\n         // var wtf = sendMsg(message);\r\n\r\n          return {\"status\":\"Message sent\"};\r\n*/\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scenes.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/scenes.js                                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nmodule.export({\n  SceneCollection: () => SceneCollection\n});\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nconst SceneCollection = new Mongo.Collection('scenes');\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scenesPublication.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// imports/api/scenesPublication.js                                                                                  //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet SceneCollection;\nmodule.link(\"./scenes\", {\n  SceneCollection(v) {\n    SceneCollection = v;\n  }\n\n}, 1);\nMeteor.publish('scenes', function publishScenes() {\n  return SceneCollection.find();\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// server/main.js                                                                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet LinksCollection;\nmodule.link(\"/imports/api/links\", {\n  LinksCollection(v) {\n    LinksCollection = v;\n  }\n\n}, 1);\nlet DevicesCollection;\nmodule.link(\"/imports/api/devices\", {\n  DevicesCollection(v) {\n    DevicesCollection = v;\n  }\n\n}, 2);\nlet SceneCollection;\nmodule.link(\"/imports/api/scenes\", {\n  SceneCollection(v) {\n    SceneCollection = v;\n  }\n\n}, 3);\nlet MsgsCollection;\nmodule.link(\"/imports/api/scenes\", {\n  MsgsCollection(v) {\n    MsgsCollection = v;\n  }\n\n}, 4);\nmodule.link(\"../imports/api/deviceMethods\");\nmodule.link(\"../imports/api/oscMethods\");\nmodule.link(\"../imports/api/devicesPublications\");\nmodule.link(\"../imports/api/scenesPublication\");\nmodule.link(\"../imports/api/messagesPublication\");\n\nfunction insertDevice(_ref) {\n  let {\n    device,\n    name,\n    usb,\n    status,\n    battery,\n    volume\n  } = _ref;\n  DevicesCollection.insert({\n    device,\n    name,\n    usb,\n    status,\n    battery,\n    volume,\n    createdAt: new Date()\n  });\n}\n\nfunction insertScene(_ref2) {\n  let {\n    number,\n    title,\n    current\n  } = _ref2;\n  SceneCollection.insert({\n    number,\n    title,\n    current,\n    createdAt: new Date()\n  });\n}\n\nMeteor.startup(() => {\n  // If the Links collection is empty, add some data.\n  console.log(DevicesCollection.find().count());\n\n  if (DevicesCollection.find().count() === 0) {\n    for (i = 1; i <= 10; i++) {\n      let id = '0' + i.toString();\n      id = id.substr(id.length - 2, 2);\n      insertDevice({\n        device: '192.168.60.' + (100 + i),\n        name: id,\n        usb: '?',\n        status: 'not-present',\n        battery: '?',\n        volume: '?'\n      });\n    }\n  }\n\n  console.log(\"scenes \" + SceneCollection.find().count());\n\n  if (SceneCollection.find().count() === 0) {\n    insertScene({\n      number: \"0\",\n      title: \"waiting to start\",\n      current: \"true\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"1\",\n      title: \"Intro Music\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"2\",\n      title: \"Train Station\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"3\",\n      title: \"Music station > care home \",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"4\",\n      title: \"Care Home\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"5\",\n      title: \"Music care home > supermarket\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"6\",\n      title: \"Supermarket\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"7\",\n      title: \"Music supermarket > market\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"8\",\n      title: \"Market\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"9\",\n      title: \"Music market > garden\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"10\",\n      title: \"Garden\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"11\",\n      title: \"Music garden > home\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"12\",\n      title: \"Home\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n    insertScene({\n      number: \"13\",\n      title: \"Outro Music\",\n      current: \"false\",\n      prepping: \"false\"\n    });\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".jsx\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"fa4291de09266c5505ddf15691351696c957307d","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/deviceMethods.js","imports/api/devices.js","imports/api/devicesPublications.js","imports/api/links.js","imports/api/messages.js","imports/api/messagesPublication.js","imports/api/oscMethods.js","imports/api/scenes.js","imports/api/scenesPublication.js","server/main.js"],"names":["check","module","link","v","messageTransform","DevicesCollection","SceneCollection","MsgsCollection","Meteor","methods","deviceUpdate","data","console","log","deviceID","usb","status","battery","volume","entity","findOne","update","_id","$set","msg","substr","insert","time","Date","now","msg_id","find","count","testMethod","ip","s","number","current","warning","resetDevice","closeDevice","resetAllDevices","call","multi","remove","export","Mongo","Collection","publish","publishDevices","LinksCollection","publishMessages","osc","default","dgram","sendOSC","isServer","options","type","send","host","port","udp","createSocket","message","address","args","value","buf","toBuffer","length","isClient","endPerfOSC","stopMarkerMessage","returnMessage","rewindOSC","publishScenes","insertDevice","device","name","createdAt","insertScene","title","startup","i","id","toString","prepping"],"mappings":"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","file":"/app.js","sourcesContent":["import { check } from 'meteor/check'\r\nimport { messageTransform } from 'osc-min/lib/osc-utilities'\r\nimport { DevicesCollection } from './devices'\r\nimport {SceneCollection} from './scenes'\r\nimport {MsgsCollection} from './messages'\r\n\r\nMeteor.methods({\r\n    deviceUpdate(data){\r\n        console.log('updating device: ' + data.deviceID\r\n        + \"\\n [usb: \" + data.usb\r\n        + \"; Status: \" + data.status\r\n        + \"; Power: \" + data.battery\r\n        + \"; Volume: \" + data.volume +\"]\");\r\n        //console.log(DevicesCollection.find().count())\r\n        //check(deviceID, String);\r\n        //check(status, String);\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : data.status, \r\n                    \"usb\" : data.usb,\r\n                    \"battery\" : data.battery,\r\n                    \"volume\" : data.volume\r\n                }}\r\n            );\r\n        \r\n        let msg = 'device-' + data.deviceID.substr(12)\r\n         + ' updated with status: ' + data.status\r\n         + ' & usb: ' + data.usb;\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n        //Meteor.call('msg', {msg: msg});\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    testMethod(data){\r\n        ip = '192.168.60.101';\r\n        if(ip == data.deviceID)\r\n        console.log(data);\r\n        s = SceneCollection.findOne({\"current\": \"true\"});\r\n        //console.log(s);\r\n        SceneCollection.update(s._id,\r\n            {$set: {\"current\": \"false\"\r\n                }}\r\n            );\r\n        \r\n        s = SceneCollection.findOne({number: data.current});\r\n        //console.log(s);\r\n        SceneCollection.update(s._id,\r\n                {$set: {\"current\": \"true\", \"prepping\" : data.warning}}\r\n            );\r\n    },\r\n    resetDevice(data){\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : \"waiting\", \r\n                    \"usb\" : data.usb,\r\n                    \"battery\" : data.battery,\r\n                    \"volume\" : data.volume\r\n                }}\r\n            );\r\n        let msg = 'device-' + data.deviceID.substr(12) + ' reset with status: ' + data.status;\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    closeDevice(data){\r\n        /*\r\n        GH: not sure if ever called\r\n        */ \r\n        //console.log(\"quitting\" + data.deviceID);\r\n        entity = DevicesCollection.findOne({\"device\":data.deviceID});\r\n        //console.log(entity);\r\n        DevicesCollection.update(entity._id, \r\n            {$set: {\"status\" : \"not-present\", \r\n                    \"usb\" : \"?\",\r\n                    \"battery\" : \"?\",\r\n                    \"volume\" : \"?\"\r\n                }}\r\n            );\r\n        //console.log(data.deviceID + ' quit ');\r\n        let msg = 'device-' + data.deviceID.substr(12) + ' app was closed.';\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n\r\n        return {\"id\":entity._id,\r\n                \"status\":\"sucess\"\r\n                };\r\n    },\r\n    \r\n    resetAllDevices(data){\r\n\r\n        Meteor.call('rewindOSC');\r\n        //entity = DevicesCollection.find();\r\n        //console.log(entity);\r\n        DevicesCollection.update({}, \r\n            {$set: {\"status\" : \"reset\", \r\n                    \"usb\" : \"null\",\r\n                    \"battery\" : \"null\",\r\n                    \"volume\" : \"null\"\r\n                }},\r\n                {multi: true}\r\n            );\r\n\r\n            \r\n            \r\n        //    clear messages\r\n        MsgsCollection.remove({});\r\n        //console.log(\"All devices were reset.\");\r\n        let msg = \"All devices in database were reset.\";\r\n        MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n        console.log(msg);\r\n    }\r\n})\r\n\r\n// Meteor.methods('new-test', function(){\r\n//     console.log('new test');\r\n// }, {\r\n//     url: 'new-test'\r\n// })","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const DevicesCollection = new Mongo.Collection('newdevices');\r\n","import {Meteor} from 'meteor/meteor'\r\nimport { DevicesCollection } from './devices'\r\n\r\nMeteor.publish('devices', function publishDevices(){\r\n    return DevicesCollection.find();\r\n})\r\n","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const LinksCollection = new Mongo.Collection('links');\r\n","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const MsgsCollection = new Mongo.Collection('messages');","import {Meteor} from 'meteor/meteor'\r\nimport { MsgsCollection } from './messages'\r\n\r\nMeteor.publish('messages', function publishMessages(){\r\n    return MsgsCollection.find();\r\n})","import osc from 'osc-min'\r\nimport dgram from 'dgram'\r\nimport { messageTransform } from 'osc-min/lib/osc-utilities';\r\nimport {MsgsCollection} from './messages'\r\n\r\n\r\n    Meteor.methods({\r\n        sendOSC(){\r\n            if (Meteor.isServer){\r\n              const options = {\r\n                type: 'udp4',\r\n                send: {\r\n                host: '192.168.60.54',\r\n                port: 8000\r\n                }\r\n            }\r\n            udp = dgram.createSocket(options.type);\r\n            \r\n            var message = {\r\n                address: \"/play\",\r\n                args: [{type: \"integer\", value: 1}]\r\n              };\r\n            \r\n            //sendMsg = function(msg){\r\n                var buf;\r\n                buf = osc.toBuffer(message)\r\n                udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n              //}\r\n            \r\n                 \r\n              let msg = \"Play message broadcast to OSC.\";\r\n              MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n              console.log(msg);\r\n              \r\n             // var wtf = sendMsg(message);\r\n    \r\n              return {\"status\":\"Message sent\"};  \r\n            }\r\n            if(Meteor.isClient){\r\n                console.log('The sendOSC function was run on the server');\r\n            }\r\n            \r\n        },\r\n        endPerfOSC(){\r\n            if (Meteor.isServer){\r\n                const options = {\r\n                    type: 'udp4',\r\n                    send: {\r\n                    host: '192.168.60.54',\r\n                    port: 8000\r\n                    }\r\n                }\r\n                udp = dgram.createSocket(options.type);\r\n                \r\n                // STOP\r\n                var message = {\r\n                    address: \"/stop\",\r\n                    args: [{type: \"integer\", value: 1}]\r\n                  };\r\n                    var buf;\r\n                    buf = osc.toBuffer(message)\r\n                    udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                \r\n                  // GOTO MARKER\r\n                  var stopMarkerMessage = {\r\n                    address: \"/marker\",\r\n                    args: [{type: \"integer\", value: 2}]\r\n                  };\r\n                \r\n                    var buf;\r\n                    buf = osc.toBuffer(stopMarkerMessage)\r\n                    udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n\r\n                  // REWIND TO START\r\n                    var returnMessage = {\r\n                      //address: \"/frames/str\",\r\n                      address: \"/time/str\",\r\n                      args: [{type: \"string\", value: \"0\"}]\r\n                    };\r\n                  \r\n                      var buf;\r\n                      buf = osc.toBuffer(returnMessage)\r\n                      //udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                \r\n                  let msg = \"Stop Performance message sent OSC\";\r\n                  MsgsCollection.insert({msg: msg, time: Date.now(), msg_id: MsgsCollection.find().count()+1});\r\n                  console.log(msg);\r\n                  \r\n                 // var wtf = sendMsg(message);\r\n\r\n                  return {\"status\":\"endPerfOSC Message sent\"};  \r\n            }},\r\n        rewindOSC(){\r\n            if (Meteor.isServer){\r\n                const options = {\r\n                    type: 'udp4',\r\n                    send: {\r\n                    host: '192.168.60.54',\r\n                    port: 8000\r\n                    }\r\n                }\r\n                udp = dgram.createSocket(options.type);\r\n                \r\n                // REWIND TO START\r\n                    var returnMessage = {\r\n                      //address: \"/frames/str\",\r\n                      address: \"/time/str\",\r\n                      args: [{type: \"string\", value: \"0\"}]\r\n                    };\r\n                  \r\n                      var buf;\r\n                      buf = osc.toBuffer(returnMessage)\r\n                      udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n                                  \r\n                 // var wtf = sendMsg(message);\r\n\r\n                  return {\"status\":\"endPerfOSC Message sent\"};  \r\n            }\r\n            if(Meteor.isClient){\r\n                console.log('The endPerfOSC function was run on the server');\r\n            }\r\n          }\r\n    });\r\n\r\n\r\n\r\n\r\n  //Meteor.call('devices.update',\"fGXsSmgrB434Hszgq\",\"awtirednessesome\");\r\n/*\r\n\r\n        const options = {\r\n            type: 'udp4',\r\n            send: {\r\n            host: '192.168.178.22',\r\n            port: 8000\r\n            }\r\n        }\r\n        udp = dgram.createSocket(options.type);\r\n        \r\n        var message = {\r\n            address: \"/play\",\r\n            args: [1]\r\n          };\r\n        \r\n        //sendMsg = function(msg){\r\n            var buf;\r\n            buf = osc.toBuffer(msg)\r\n            udp.send(buf, 0, buf.length, options.send.port, options.send.host);\r\n          //}\r\n        \r\n\r\n          \r\n         // var wtf = sendMsg(message);\r\n\r\n          return {\"status\":\"Message sent\"};\r\n*/","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const SceneCollection = new Mongo.Collection('scenes');\r\n","import {Meteor} from 'meteor/meteor'\r\nimport { SceneCollection } from './scenes'\r\n\r\nMeteor.publish('scenes', function publishScenes(){\r\n    return SceneCollection.find();\r\n})","import { Meteor } from 'meteor/meteor';\r\nimport { LinksCollection } from '/imports/api/links';\r\nimport { DevicesCollection } from '/imports/api/devices';\r\nimport { SceneCollection } from '/imports/api/scenes';\r\nimport { MsgsCollection } from '/imports/api/scenes';\r\nimport '../imports/api/deviceMethods';\r\nimport '../imports/api/oscMethods'\r\nimport '../imports/api/devicesPublications'\r\nimport '../imports/api/scenesPublication'\r\nimport '../imports/api/messagesPublication'\r\n\r\nfunction insertDevice({ device, name, usb, status, battery, volume }) {\r\n  DevicesCollection.insert({device, name,  usb, status, battery, volume, createdAt: new Date()});\r\n}\r\n\r\nfunction insertScene({ number, title, current }) {\r\n  SceneCollection.insert({number, title, current, createdAt: new Date()});\r\n}\r\n\r\nMeteor.startup(() => {\r\n  // If the Links collection is empty, add some data.\r\n  console.log(DevicesCollection.find().count());\r\n  if (DevicesCollection.find().count() === 0) {\r\n    for(i = 1; i <= 10; i++ ){\r\n\r\n      let id = '0' + (i).toString();\r\n      id = id.substr(id.length-2, 2);\r\n\r\n          insertDevice({\r\n      device: '192.168.60.' + (100 + i),\r\n      name: id,\r\n      usb: '?',\r\n      status: 'not-present',\r\n      battery: '?',\r\n      volume: '?'\r\n    });\r\n    }\r\n  }\r\n\r\n    console.log(\"scenes \" + SceneCollection.find().count());\r\n    if (SceneCollection.find().count() === 0) {\r\n      insertScene({number : \"0\", title: \"waiting to start\", current: \"true\", prepping: \"false\"});\r\n      insertScene({number : \"1\", title: \"Intro Music\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"2\", title: \"Train Station\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"3\", title: \"Music station > care home \", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"4\", title: \"Care Home\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"5\", title: \"Music care home > supermarket\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"6\", title: \"Supermarket\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"7\", title: \"Music supermarket > market\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"8\", title: \"Market\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"9\", title: \"Music market > garden\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"10\", title: \"Garden\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"11\", title: \"Music garden > home\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"12\", title: \"Home\", current: \"false\", prepping: \"false\"});\r\n      insertScene({number : \"13\", title: \"Outro Music\", current: \"false\", prepping: \"false\"});\r\n    } \r\n\r\n\r\n});\r\n"]}}]